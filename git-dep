#! /bin/sh
ORIG_DIR="$(pwd)"
USAGE="[options] init|clone|checkout|record|status|add|remove|-h"
OPTIONS_SPEC=
LONG_USAGE="\
git dep init [-f] [<name>]  
                            enables dependency tracking for repository
git dep clone [-D <target-dir>] [name...]
                            clones all missing/specified dependencies
git dep checkout [-o|--old]
                            checks out the specific revisions of dependencies
git dep record              records current revision in all dependent repositories
git dep status              shows status of all dependencies
git dep add <path>          adds a new dependency
git dep remove <name>       removes a dependency
git dep all                 lists all tracked repositories
"
. git-sh-setup
USAGEREF="Run $dashless -h for usage."
require_work_tree

say() {
	! $quiet && echo >&2 "$*"
}

die_init() {
  die "Dependency tracking is not enabled for this repository.
Please run git dep init, or git dep -h for help."
}

# list_dependencies <config-file>
list_dependencies() {
  git config -f "$1" --get-regexp '^dep\..*\.commitid' | awk -F. '{ print $2 }'
}

list_repositories() {
  git config --global --get-regexp '^repos\..*\.path' | awk -F. '{ print $2 }'
}

find_repository() {
  git config --global --get "repos.$1.path"
}

find_existing_repository() {
  dep="$1"
  path="$(find_repository "$1")"
  if test -z "$path"; then
    say "Repository $current_name depends on $1, which has not been found."
    say "  -> If you already have it somewhere, run 'git dep init $1' in that folder."
    say "  -> If you do not have it and want to download it, run 'git dep clone' now."
    say "  -> To remove this dependency, run 'git dep remove $1'."
  else
    name="$(git config -f "$path/$deps_filename" repos.name)"
    if test "$name" != "$1"; then
      say "Repository $current_name depends on $1, which is registered at $path."
      say "However the repository found at that path is named $name."
      say "  -> To fix the name of the repository, run 'git dep init -f $1' in $path."
      say "  -> If you have $1 somewhere else, run 'git dep init $1' in that folder."
      say "  -> To remove this dependency, run 'git dep remove $1'."
    else
      echo "$path"
    fi
  fi
}

# clone_repository name
clone_repository() {
  check="$(git config -f "$config_file" "dep.$1.commitid")"
  test -z "$check" &&
    die "$current_name does not depend on $1, so cannot clone it."
  url="$(git config -f "$config_file" "dep.$1.url")"
  test -z "$url" &&
    die "Cloning $1 is impossible because no clone URL is recorded in $deps_filename."
  say "Cloning $url as $1."
  (cd "$2"; git clone $url $1) ||
    die "Failed to clone $url."
  (cd "$2/$1"; git dep -q init) ||
    die "Failed to enable dependency tracking for $2/$1."
}

# checkout_repository name path
checkout_repository() {
  commitid="$(git config -f "$config_file" "dep.$1.commitid")"
  test -z "$commitid" &&
    die "$current_name does not depend on $1, so cannot check it out."
  branch="$(git config -f "$config_file" "dep.$1.branch")"
  test -z "$branch" &&
    die "Checking out $1 is impossible because no branch is recorded for it in $deps_filename."
    
  say "Repository $current_name depends on $1 : $commitid."
  
  cur_commitid="$(cd "$2"; git rev-parse HEAD)" ||
      die "Cannot fetch commit id from repository $child_name".
  
  cur_branch="$(read_branch "$2")"
  
  # check if the required commit exists
  (cd "$2"; git cat-file commit $commitid >/dev/null 2>&1) || 
    die "  -> the required commit id does not exist. rebase/amend has happened?"

  if test "$cur_branch" != "$branch-oldver"; then
    # if HEAD is okay, do not touch anything
    test "$commitid" == "$cur_commitid" && {
      case "$cur_branch" in
        $branch)
          say "  -> $1's HEAD is on the correct revision, on branch $branch.";;
        '<detached>')
          say "  -> $1's HEAD is on the correct revision, the HEAD is detached (!)";;
        *)
          say "  -> $1's HEAD is on the correct revision, but on branch $cur_branch instead of $branch.";;
      esac
      exit 0
    }
  
    # if HEAD is newer but still okay, do not touch anything
    ! $old && test -z "$(cd "$2"; git rev-list HEAD..$commitid)" && {
      case "$cur_branch" in
        $branch)
          say "  -> $1's HEAD is on a descendant of the correct revision, on $branch.";;
        '<detached>')
          say "  -> $1's HEAD is on a descendant of the correct revision, the HEAD is detached (!)";;
        *)
          say "  -> $1's HEAD is on a descendant of the correct revision, but on branch $cur_branch instead of $branch.";;
      esac
      say "     (use -o to check out the exact revision)."
      exit 0
    }
  fi

  # check if the correct branch is suitable as-is
  test "$commitid" == "$(cd "$2"; git rev-parse $branch)" && {
    (cd "$2"; git checkout $branch) ||
      die "Failed to checkout $branch."
    say "  -> checked out $branch."
    exit 0
  }

  # check if the correct branch is suitable as-is as a descendant
  ! $old && test -z "$(cd "$2"; git rev-list $branch..$commitid)" && {
    (cd "$2"; git checkout $branch) ||
      die "Failed to checkout $branch."
    say "  -> checked out $branch (use -o to check out the exact revision)."
    exit 0
  }
  
  if test "$cur_branch" == "$branch-oldver"; then
    # if HEAD is okay, do not touch anything
    test "$commitid" == "$cur_commitid" && {
      say "  -> $1's HEAD is on the correct revision, on branch $branch-oldver (!)"
      exit 0
    }
  
    # if HEAD is newer but still okay, do not touch anything
    ! $old && test -z "$(cd "$2"; git rev-list HEAD..$commitid)" && {
      say "  -> $1's HEAD is on a descendant of the correct revision, on branch $branch-oldver (!)"
      say "     (use -o to check out the exact revision)."
      exit 0
    }
  fi
  
  if (cd "$2"; git rev-parse $branch-oldver >/dev/null 2>&1); then
    # check if the oldver branch is suitable as-is
    test "$commitid" == "$(cd "$2"; git rev-parse $branch-oldver)" && {
      (cd "$2"; git checkout $branch-oldver) ||
        die "Failed to check out $branch-oldver."
      say "  -> checked out $branch-oldver, which is on the correct commit id."
      exit 0
    }
  
    # check if we can trash oldver
    test -n "$(cd "$2"; git rev-list $branch..$branch-oldver)" && {
      say "  -> cannot trash $branch-oldver because it has commits not found in $branch."
      say "     * if you made any new commits on $branch-oldver, please merge them into $branch"
      say "     * if you are sure there is nothing valuable on $branch-oldver, pls run"
      if test "$cur_branch" != "$branch-oldver"; then
        say "       (cd "$2"; git branch -D $branch-oldver)"
      else
        say "       (cd "$2"; git checkout -f $branch; git branch -D $branch-oldver)"
      fi
      exit 1
    }
    if test "$cur_branch" != "$branch-oldver"; then
      (cd "$2"; git branch -f $branch-oldver $commitid) || 
        die "Failed to force-set $branch-oldver to the required commit id."
      (cd "$2"; git checkout $branch-oldver) ||
        die "Failed to checkout $branch-oldver."
    else
      (cd "$2"; git reset --hard $commitid) || 
        die "Failed to reset $branch-oldver to the required commit id."
    fi
  else
    (cd "$2"; git checkout -b $branch-oldver $commitid) ||
      die "Failed to create branch $branch-oldver."
  fi

  say "  -> created branch $branch-oldver, checked out the correct revision. enjoy."
}

read_branch() {
  branch_ref="$(cat $1/.git/HEAD)"
  case "${branch_ref// /_}" in
    ref:_refs/heads/*)
      echo "${branch_ref#ref: refs/heads/}";;
    *)
      echo "<detached>";;
  esac
}

record_dependency() {
  parent_name="$1"
  parent_config="$2"
  child_name="$3"
  child_dir="$4"

  oldurl="$(git config -f "$parent_config" "dep.$child_name.url")"
  oldcommitid="$(git config -f "$parent_config" "dep.$child_name.commitid")"
  oldbranch="$(git config -f "$parent_config" "dep.$child_name.branch")"
  
  branch_ref="$(cat $child_dir/.git/HEAD)"
  case "${branch_ref// /_}" in
    ref:_refs/heads/*)
      branch="${branch_ref#ref: refs/heads/}";;
    ref:_*)
      die "I kindly refuse to record a dependency on $child_name with head attached to ${branch_ref#ref: }.";;
    *)
      die "I kindly refuse to record a dependency on $child_name with a detached head.";;
  esac
  case "$branch" in
    *-oldver)   branch="${branch%-oldver}"
  esac
  
  url="$(git config -f "$child_dir/.git/config" remote.origin.url)"
  commitid="$(export GIT_DIR="$child_dir/.git"; git rev-parse HEAD)" ||
    die "Cannot fetch commit id from repository $child_name".
  say "Repository $parent_name depends on $child_name."
  test "$commitid" != "$oldcommitid" && {
    git config -f "$parent_config" "dep.$child_name.commitid" "$commitid" ||
      die "Cannot write commit id to $parent_config."
    say "  -> updated commit id: $commitid."
  }
  test "$url" != "$oldurl" && {
    git config -f "$parent_config" "dep.$child_name.url" "$url" ||
      die "Cannot write url to $parent_config."
    say "  -> updated url: $url."
  }
  test "$branch" != "$oldbranch" && {
    git config -f "$parent_config" "dep.$child_name.branch" "$branch" ||
      die "Cannot write branch to $parent_config."
    say "  -> updated branch: $branch."
  }
}

cmd_init() {
  # defaults
  force=false
  
  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -f | --force)     force=true; shift;;
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                break=true;;
    esac
  done
  name="$1"
  
  test -n "$current_name" && {
    $force || test -z "$name" || die "Name already set. Use -f to overwrite."
    test -n "$name" && say "Forced overwriting of old name $oldname."
  }
  test -z "$name" && name="$current_name"
  test -z "$name" && name="$(basename "$(pwd)")"
  test "$name" != "$current_name" &&
    git config -f "$config_file" repos.name "$name"
  git config --global "repos.$name.path" "$(pwd)"
  
  say "Dependency tracking initialized, repository is now known as '$name'."
  url="$(git config remote.origin.url)"
  test -z "$url" &&
    say "Warning: remote 'origin' does not exist. Dependent repositories would not
be able to record a URL to clone from, and thus git dep clone won't work.
It is highly recommended to set up remote 'origin'."
  test -n "$url" &&
    say "
NOTE: Dependent repositories will be setup to clone the origin URL,
i.e. a URL pointed to by remote 'origin'. Currently it is:

    $url

Please check that the above address is valid, as it will be recorded in all
dependent repositories. This URL can be changed with:

    git config remote.origin.url <new-url-here>
"
}

cmd_add() {
  test -f "$config_file" ||
    die_init
    
  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                break=true;;
    esac
  done
  
  path="$1"
  test -z "$path" && die "Please specify a path to the repository you want to add. $USAGEREF"
  test -d "$path" || die "Specified path does not exist: $path."
  path="$(cd "$path"; pwd)"

  test -d "$path/.git" || die "Specified path is not a Git repository: $path."
  peer_config="$path/$deps_filename"
  test -f "$peer_config" || die "Please run git dep init inside $path first."
  peer_name="$(git config -f "$peer_config" repos.name)"
  test -z "$peer_name" && die "Invalid empty peer name. Please run git dep init -f inside $path."
  record_dependency "$current_name" "$config_file" "$peer_name" "$path"
  
  url="$(git config -f "$path/.git/config" remote.origin.url)"
}

cmd_remove() {
  test -f "$config_file" ||
    die_init

  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                break=true;;
    esac
  done

  name="$1"
  test -z "$name" && die "Please specify a name of dependency to remove. $USAGEREF"
  check="$(git config -f "$config_file" --get "dep.$name.commitid")"
  test -z "$check" && die "This repository does not depend on $name. Run git dep status to see all dependencies."
  git config -f "$config_file" --remove-section "dep.$name" ||
    die "Failed to update $config_file."
}

cmd_record() {
  test -f "$config_file" ||
    die_init

  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                die "No arguments expected. $USAGEREF";;
    esac
  done
    
  say "Step 1. Checking repositories $current_name depends on."
  for dep in $(list_dependencies "$config_file"); do
    path="$(find_existing_repository "$dep")"
    test -n "$path" && record_dependency "$current_name" "$config_file" "$dep" "$path"
  done
  
  say "Step 2. Checking repositories that depend on $current_name."
  for repos in $(list_repositories); do
    path="$(git config --global --get "repos.$repos.path")"
    if ! test -f "$path/$deps_filename"; then
      say "Skipped checking of $repos because no .$deps_filename found in it."
    else
      dep="$(git config -f "$path/$deps_filename" --get "dep.$current_name.commitid")"
      test -n "$dep" &&
        record_dependency "$repos" "$path/$deps_filename" "$current_name" "$(pwd)"
    fi
  done
}

cmd_clone() {
  test -f "$config_file" ||
    die_init

  # defaults
  target="$(cd ..; pwd)"
  
  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -D)               shift; target="$1"; shift;;
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                break=true;;
    esac
  done
  
  status=0
  test -d "$target" ||
    die "The specified target directory does not exist: $target."
  if test $# == 0; then
    say "Cloning all missing dependencies of $current_name into $target."
    for dep in $(list_dependencies "$config_file"); do
      path="$(find_repository "$dep")"
      test -z "$path" || ! test -d "$path" && {
        (clone_repository "$dep" "$target") || status=1
      }
    done
  else
    say "Cloning the specified dependencies into $target."
    while test $# != 0; do
      (clone_repository "$1" "$target") || status=1
      shift
    done
  fi
  exit $status
}

cmd_checkout() {
  test -f "$config_file" ||
    die_init

  # defaults
  old=false
  
  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -o | --old)       old=true; shift;;
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                break=true;;
    esac
  done
  
  status=0
  if test $# == 0; then
    say "Updating all dependencies of $current_name."
    for dep in $(list_dependencies "$config_file"); do
      path="$(find_existing_repository "$dep")"
      test -n "$path" && {
        (checkout_repository "$dep" "$path") || status=1
      }
    done
  else
    say "Updating the specified dependencies."
    while test $# != 0; do
      path="$(find_existing_repository "$dep")"
      test -n "$path" && {
        (checkout_repository "$dep" "$path") || status=1
      }
      shift
    done
  fi
  exit $status
}

# status_walker config_file
status_walker() {
  for repos in $(list_dependencies "$1"); do
    path="$(find_repository "$repos")"
    if test -z "$path" || ! test -d "$path"; then
      branch="<MISSING>"
      deps=""
    else
      branch="$(read_branch "$path")"
      if ! test -f "$path/$deps_filename"; then
        deps="N/A"
      else
        deps="$(list_dependencies "$path/$deps_filename" | wc -l | sed 's/ //g')"
      fi
    fi
    printf "$fmt" "$repos" "$branch" "$deps" "$path"
    # test -n "$path" && test -d "$path" && status_walker "$path/$deps_filename"
  done
}

cmd_status() {
  test -f "$config_file" ||
    die_init

  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                die "No arguments expected. $USAGEREF";;
    esac
  done

  fmt="%-15s %-15s %-4s %s\n"
  printf "$fmt" "NAME" "BRANCH" "DEPS" "PATH"
  status_walker "$config_file"
  echo
  echo "TOTAL: $(list_dependencies "$config_file" | wc -l) dependencies."
}

cmd_all() {
  # parse
  break=false
  while test $# != 0 && ! $break; do
    case "$1" in
      -*)               die "Invalid option $1. $USAGEREF";;
      *)                die "No arguments expected. $USAGEREF";;
    esac
  done
  
  fmt="%-15s %-15s %-4s %s\n"
  printf "$fmt" "NAME" "BRANCH" "DEPS" "PATH"
  for repos in $(list_repositories); do
    path="$(git config --global --get "repos.$repos.path")"
    if ! test -d "$path"; then
      branch="<MISSING>"
      deps=""
    else
      branch="$(read_branch "$path")"
      if ! test -f "$path/$deps_filename"; then
        deps="N/A"
      else
        deps="$(list_dependencies "$path/$deps_filename" | wc -l | sed 's/ //g')"
      fi
    fi
    printf "$fmt" "$repos" "$branch" "$deps" "$path"
  done
}

# defaults
quiet=false
deps_filename=.gitdeps
config_file="$(pwd)/$deps_filename"

# parse command line (until a command name is found)
command=""
while test $# != 0 && test -z "$command"; do
  case "$1" in
    -q | --quiet)     quiet=true; shift;;
    -*)               die "Invalid option $1. $USAGEREF";;
    init|clone|checkout|record|status|add|remove|all)
                      command=$1; shift;;
    *)                die "Invalid command $1. $USAGEREF";;
  esac
done
test -z "$command" && command=status

# global useful data
current_name="$(git config -f "$config_file" repos.name)"

cmd_$command "$@"
